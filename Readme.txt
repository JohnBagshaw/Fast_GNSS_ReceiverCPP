[OVERVIEW]:

SDR project is re-structured keeping in mind easier to read and modular software design.


[FILE LIST]:

Following is list of source files. These are located in VCProject\src directory.

1) acquisition.cpp
2) gen_code.cpp
3) matcreat.cpp
4) result_read_write.cpp
5) SDR.cpp
6) settings.cpp
7) tracking.cpp

Following is list of header files. These are located in VCProject\hdr directory.

1) acquisition.hpp
2) gen_code.hpp
3) matcreat.hpp
4) result_read_write.hpp
5) SDR.hpp
6) settings.hpp
7) tracking.hpp
8) constants.h
9) code_table.h
10) structures.hpp

VCProject\fftw-3.3.5-dll64 contain FFTW library, dll and header files.
VCProject\in_data contains list of input binary files. Currently only 5 files are placed here. You can put more here later.
VCProject\x64 is directory containing executable.
VCProject\Readme.txt contains instructions to run the simulation.
VCProject\Optimization contains steps for optimizations done to SDR project code.
VCProject\sample_nottochange_ch1_fileN_*_cpp.mat are files generated by running SDR.exe. These contain results from C++ code.
VCProject\sample_nottochange_ch1_fileN_*_mat.mat are files generated by running matlab. These contain results from MATLAB scripts.
VCProject\SDR.* are Visual Studio project files are necessary for IDE but not for us.

[CODE DESCRIPTION]

Main source file is SDR.cpp. This contain application entry point function called main() and another important function called postProcessing().
main() accepts name of binary input file and should be provided as instructed in Readme.txt. 

IMPORTANT FUNCTIONS LIST

	- postProcessing()
	- settings()
	- acquisition()
	- preRun()
	- showChannelStatus()
	- tracking()

STRUCTURE LIST

	- Settings_t
	- AcqResults_t
	- TrackResults_t


main() function first calls initSettings() function to populate the Settings_t structure with proper settings parameters.
It then calls postProcessing function. postProcessing() function takes in Settings_t structure and then calls acquisition function to get acquisition results in AcqResults_t structure
and tracking() to get tracking results in TrackResults_t structure. After returing from acquisition() function and before calling tracking(), postProcessing() function calls preRun()
to arrange/sort acquisition results and make them friendly for tracking function and also showChannelStatus() to display results on the console.

postProcessing() function finally calls saveResults() to save tracking and acquisition results to sample_nottochange_ch1_fileN_*_cpp.mat files.
Finally, postProcessing() function calls compareAcquisitionResults() and compareTrackingResults() to load sample_nottochange_ch1_fileN_*_mat.mat files and 
compare each and every one of results array elements with it's counterpart in MATLAB.

[CONFIGURATION PARAMETERS]

Settings_t structure contains all the parameter structures. Most important ones are acqThreshold, msToProcess, acqSearchBand, samplingFreq and iF. 
acqThreshold should be changed if simulation run indicates that no GNSS signals are captured. Currently, acqThreshold=1.2 which seems good to get enough number
of measurements but it can further be lowered and can be experimented with.

Other parameters like msToProcess and acqSearchBand will change simulation run time because they effect number of computations in the algorithm directly.


--------------------------------------------
Code Execution Times
--------------------------------------------
--------------------------------------------------
For input file: sample_nottochange_ch1_fileN_0.bin
--------------------------------------------------
Acquisition Function Run Time:   11.51741 seconds
Acquisition Outer Loop Run Time: 11.18574 seconds
Acquisition Inner Loop Run Time: 6.14329  seconds
Tracking Function Run Time:      2.13146  seconds
Main Function Run Time:          13.93035 seconds


--------------------------------------------------
For input file: sample_nottochange_ch1_fileN_1.bin
--------------------------------------------------
Acquisition Function Run Time:   14.08069 seconds
Acquisition Outer Loop Run Time: 13.74970 seconds
Acquisition Inner Loop Run Time: 6.05518 seconds
Tracking Function Run Time:      2.14640 seconds
Main Function Run Time:          16.50387 seconds


--------------------------------------------------
For input file: sample_nottochange_ch1_fileN_2.bin
--------------------------------------------------

Acquisition Function Run Time:   11.67006 seconds
Acquisition Outer Loop Run Time: 11.34279 seconds
Acquisition Inner Loop Run Time: 5.85115 seconds
Tracking Function Run Time:      2.04322 seconds
Main Function Run Time:          13.97813 seconds


--------------------------------------------------
For input file: sample_nottochange_ch1_fileN_3.bin
--------------------------------------------------
Acquisition Function Run Time:   11.79040 seconds
Acquisition Outer Loop Run Time: 11.45742 seconds
Acquisition Inner Loop Run Time: 5.98345 seconds
Tracking Function Run Time:      1.78968 seconds
Main Function Run Time:          13.84551 seconds


--------------------------------------------------
For input file: sample_nottochange_ch1_fileN_4.bin
--------------------------------------------------
Acquisition Function Run Time:   11.96633 seconds
Acquisition Outer Loop Run Time: 11.63377 seconds
Acquisition Inner Loop Run Time: 6.12869 seconds
Tracking Function Run Time:      2.12007 seconds
Main Function Run Time:          14.37326 seconds


-------------------------------------------------
Code Optimization Efforts
-------------------------------------------------
Code is quite optimized now and major time of execution is spent in third party fftw library calls. FFTW library itself is quite fast itself.

Acquisition function run time is reduced from 22 seconds to 9 seconds by following steps,
	a) inline complex multiplication
	b) removing usage of memset
	c) moving malloc calls out of loops
	d) DSP trick of conj(fft(x)) is equal to ifft(x) if x is real
	e) removing common code

Tracking function is quite fast itself because it doesn't involve calls to expensive FFTW functions.

Execution time stats are available at the console for each simulation run.

